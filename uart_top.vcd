$date
    Mar 25, 2021  07:51:22
$end
$version
    TOOL:	xmsim	20.09-s003
$end
$timescale
    1 ps
$end

$scope module uart_top_tb $end
$var parameter 32 !    WIDTH $end
$var reg       1 "    clk $end
$var reg       1 #    clk_sel $end
$var reg       1 $    rstn $end
$var reg      16 %    dlh_dll [15:0] $end
$var reg       1 &    dut1_tr_en $end
$var reg       1 '    dut1_tr_data_load $end
$var reg       1 (    dut1_mode_osl $end
$var reg       8 )    dut1_tr_fifo_data_w [7:0] $end
$var reg       8 *    dut1_rx_data_read_out [7:0] $end
$var reg       1 +    dut1_rx_data_read_en $end
$var reg       1 ,    dut1_tx_data_w_en $end
$var reg       1 -    dut1_transmit_busy $end
$var reg       1 .    dut1_tx_i_interpt $end
$var reg       1 /    dut1_rx_i_interpt $end
$var reg       1 0    dut1_tx_o_interpt $end
$var reg       1 1    dut1_rx_o_interpt $end
$var reg       1 2    dut2_tr_en $end
$var reg       1 3    dut2_mode_osl $end
$var reg       1 4    dut2_tr_data_load $end
$var reg       8 5    dut2_tr_fifo_data_w [7:0] $end
$var reg       8 6    dut2_rx_data_read_out [7:0] $end
$var reg       1 7    dut2_rx_data_read_en $end
$var reg       1 8    dut2_tx_data_w_en $end
$var reg       1 9    dut2_transmit_busy $end
$var reg       1 :    dut2_tx_i_interpt $end
$var reg       1 ;    dut2_rx_i_interpt $end
$var reg       1 <    dut2_tx_o_interpt $end
$var reg       1 =    dut2_rx_o_interpt $end
$var reg       1 >    dut1_rx_dut2_tx $end
$var reg       1 ?    dut1_tx_dut2_rx $end

$scope module TX_DUT $end
$var parameter 32 @    WIDTH $end
$var wire      1 A    clk  $end
$var wire      1 B    clk_sel  $end
$var wire      1 C    rstn  $end
$var wire      1 D    tr_en  $end
$var wire      1 E    mode_osl  $end
$var wire     16 F    dlh_dll [15:0] $end
$var wire      8 G    tr_fifo_data_w [7:0] $end
$var wire      1 H    rx_data_in  $end
$var wire      1 I    tx_data_out  $end
$var wire      8 J    rx_data_read_out [7:0] $end
$var wire      1 K    rx_data_read_en  $end
$var wire      1 L    tx_data_w_en  $end
$var wire      1 M    transmit_busy  $end
$var wire      1 N    tx_i_interpt  $end
$var wire      1 O    rx_i_interpt  $end
$var wire      1 P    tx_o_interpt  $end
$var wire      1 Q    rx_o_interpt  $end
$var wire      1 R    tr_data_load  $end
$var wire      1 S    clk_out  $end
$var wire      1 T    modified_clk  $end
$var wire      1 U    tr_d_ready  $end
$var wire      1 V    rx_fifo_en  $end
$var wire      8 W    tr_fifo_data_in [7:0] $end
$var wire      8 X    rx_fifo_data_in [7:0] $end
$var wire      1 Y    tr_bz  $end

$scope module ck_mux $end
$var wire      1 A    in_0  $end
$var wire      1 S    in_1  $end
$var wire      1 B    sel  $end
$var reg       1 Z    out $end
$var parameter  1 [    IN_0 $end
$var parameter  1 \    IN_1 $end
$upscope $end


$scope module clk_generator $end
$var wire      1 A    clk  $end
$var wire      1 C    rstn  $end
$var wire     16 F    dlh_dll [15:0] $end
$var wire      1 E    mode_osl  $end
$var wire      1 S    bclk  $end
$var wire     16 ]    mode_0 [15:0] $end
$var wire     16 ^    mode_1 [15:0] $end
$var reg       5 _    mode_reg_0 [4:0] $end
$var reg       4 `    mode_reg_1 [3:0] $end
$var reg      16 a    ck_count [15:0] $end
$upscope $end


$scope module tr_fifo $end
$var parameter 32 b    WIDTH $end
$var parameter 32 c    SIZE $end
$var wire      1 T    clk_i  $end
$var wire      1 C    rst_n_i  $end
$var wire      1 L    we_i  $end
$var wire      1 R    re_i  $end
$var wire      1 Y    tr_bz  $end
$var wire      8 G    wdata_i [7:0] $end
$var reg       1 d    o_interpt $end
$var reg       1 e    i_interpt $end
$var reg       1 f    d_ready $end
$var wire      8 W    rdata_o [7:0] $end
$var parameter 32 g    BYTESIZE $end
$var parameter 32 h    MEMSIZE $end
$var parameter 32 i    ADDRSIZE $end
$var integer  32 j    i $end
$var reg       8 k    mem[15] [7:0] $end
$var reg       8 l    mem[14] [7:0] $end
$var reg       8 m    mem[13] [7:0] $end
$var reg       8 n    mem[12] [7:0] $end
$var reg       8 o    mem[11] [7:0] $end
$var reg       8 p    mem[10] [7:0] $end
$var reg       8 q    mem[9] [7:0] $end
$var reg       8 r    mem[8] [7:0] $end
$var reg       8 s    mem[7] [7:0] $end
$var reg       8 t    mem[6] [7:0] $end
$var reg       8 u    mem[5] [7:0] $end
$var reg       8 v    mem[4] [7:0] $end
$var reg       8 w    mem[3] [7:0] $end
$var reg       8 x    mem[2] [7:0] $end
$var reg       8 y    mem[1] [7:0] $end
$var reg       8 z    mem[0] [7:0] $end
$var reg       4 {    waddr [3:0] $end
$var reg       4 |    raddr [3:0] $end
$var reg       4 }    count [3:0] $end
$var reg       8 ~    rdata_reg [7:0] $end
$upscope $end


$scope module tr_module $end
$var parameter 32 !!   WIDTH $end
$var wire      1 D    en  $end
$var wire      1 U    d_ready  $end
$var wire      1 T    clk  $end
$var wire      1 C    rstn  $end
$var wire      8 W    d_in [7:0] $end
$var wire      1 I    tx_data  $end
$var wire      1 Y    tr_bz  $end
$var reg       1 "!   start_bit $end
$var reg       1 #!   stop_bit $end
$var wire      2 $!   sel_wire [1:0] $end
$var wire      1 %!   p_wire  $end
$var wire      1 &!   tsr_wire  $end
$var wire      1 '!   data_load_wire  $end

$scope module tfsm $end
$var parameter 32 (!   WIDTH $end
$var wire      1 T    clk  $end
$var wire      1 C    rstn  $end
$var wire      1 D    en  $end
$var wire      1 U    d_ready  $end
$var reg       1 )!   tr_bz $end
$var reg       2 *!   sel [1:0] $end
$var reg       1 +!   data_load $end
$var parameter  3 ,!   IDLE [2:0] $end
$var parameter  3 -!   START [2:0] $end
$var parameter  3 .!   DATA [2:0] $end
$var parameter  3 /!   PARITY [2:0] $end
$var parameter  3 0!   STOP [2:0] $end
$var reg       3 1!   state_reg [2:0] $end
$var reg       3 2!   next_state [2:0] $end
$var reg       3 3!   count [2:0] $end
$upscope $end


$scope module tparity_gen $end
$var parameter 32 4!   WIDTH $end
$var wire      8 W    d_in [7:0] $end
$var reg       1 5!   p_out $end
$upscope $end


$scope module transmit_tsr $end
$var parameter 32 6!   WIDTH $end
$var wire      8 W    d_in [7:0] $end
$var wire      1 '!   ld_sh  $end
$var wire      1 D    en  $end
$var wire      1 T    clk  $end
$var wire      1 C    rst_n  $end
$var wire      1 &!   d_out  $end
$var reg       8 7!   d_in_reg [7:0] $end
$var reg       1 8!   d_out_reg $end
$upscope $end


$scope module tmux $end
$var wire      1 9!   in_0  $end
$var wire      1 &!   in_1  $end
$var wire      1 %!   in_2  $end
$var wire      1 :!   in_3  $end
$var wire      2 $!   sel [1:0] $end
$var wire      1 D    en  $end
$var reg       1 ;!   out $end
$var parameter  2 <!   IN_0 [1:0] $end
$var parameter  2 =!   IN_1 [1:0] $end
$var parameter  2 >!   IN_2 [1:0] $end
$var parameter  2 ?!   IN_3 [1:0] $end
$upscope $end

$upscope $end


$scope module rr_fifo $end
$var parameter 32 @!   WIDTH $end
$var parameter 32 A!   SIZE $end
$var wire      1 T    clk_i  $end
$var wire      1 C    rst_n_i  $end
$var wire      1 V    we_i  $end
$var wire      1 K    re_i  $end
$var wire      8 X    wdata_i [7:0] $end
$var reg       1 B!   o_interpt $end
$var reg       1 C!   i_interpt $end
$var wire      8 J    rdata_o [7:0] $end
$var parameter 32 D!   BYTESIZE $end
$var parameter 32 E!   MEMSIZE $end
$var parameter 32 F!   ADDRSIZE $end
$var integer  32 G!   i $end
$var reg       8 H!   mem[15] [7:0] $end
$var reg       8 I!   mem[14] [7:0] $end
$var reg       8 J!   mem[13] [7:0] $end
$var reg       8 K!   mem[12] [7:0] $end
$var reg       8 L!   mem[11] [7:0] $end
$var reg       8 M!   mem[10] [7:0] $end
$var reg       8 N!   mem[9] [7:0] $end
$var reg       8 O!   mem[8] [7:0] $end
$var reg       8 P!   mem[7] [7:0] $end
$var reg       8 Q!   mem[6] [7:0] $end
$var reg       8 R!   mem[5] [7:0] $end
$var reg       8 S!   mem[4] [7:0] $end
$var reg       8 T!   mem[3] [7:0] $end
$var reg       8 U!   mem[2] [7:0] $end
$var reg       8 V!   mem[1] [7:0] $end
$var reg       8 W!   mem[0] [7:0] $end
$var reg       4 X!   waddr [3:0] $end
$var reg       4 Y!   raddr [3:0] $end
$var reg       4 Z!   count [3:0] $end
$var reg       8 [!   rdata_reg [7:0] $end
$upscope $end


$scope module rx_module $end
$var parameter 32 \!   WIDTH $end
$var wire      1 T    clk  $end
$var wire      1 C    rstn  $end
$var wire      1 H    rx_data  $end
$var wire      8 X    d_out [7:0] $end
$var wire      1 V    fifo_we_en  $end
$var wire      1 ]!   sel_wire  $end
$var wire      1 ^!   p_wire  $end
$var wire      8 _!   rsr_wire [7:0] $end
$var wire      1 `!   data_load_wire  $end
$var wire      1 a!   rsr_data  $end
$var wire      1 b!   en_rsr  $end
$var wire      1 c!   parity_error  $end
$var wire      3 d!   rfsm_count_out [2:0] $end
$var wire      1 e!   p_check_in  $end
$var wire      1 f!   parity_en  $end

$scope module receiver_fsm $end
$var parameter 32 g!   WIDTH $end
$var wire      1 T    clk  $end
$var wire      1 H    d_ready  $end
$var wire      1 C    rst_n  $end
$var wire      1 c!   p_error  $end
$var reg       1 h!   sel $end
$var reg       1 i!   d_load $end
$var reg       1 j!   en_out_rsr $end
$var reg       1 k!   en_out_parity $end
$var reg       3 l!   count_out [2:0] $end
$var reg       1 m!   fifo_we_i $end
$var parameter  2 n!   IDLE [1:0] $end
$var parameter  2 o!   DATA [1:0] $end
$var parameter  2 p!   PARITY [1:0] $end
$var parameter  2 q!   STOP [1:0] $end
$var reg       2 r!   state_reg [1:0] $end
$var reg       2 s!   next_state [1:0] $end
$var reg       3 t!   count [2:0] $end
$upscope $end


$scope module receiver_data_parity $end
$var wire      1 T    clk  $end
$var wire      1 C    rstn  $end
$var wire      1 b!   en  $end
$var wire      1 a!   d_in  $end
$var wire      3 d!   count [2:0] $end
$var wire      1 e!   parity_out  $end
$var reg       1 u!   parity_out_reg $end
$upscope $end


$scope module rparity_check $end
$var parameter 32 v!   WIDTH $end
$var wire      1 T    clk  $end
$var wire      1 C    rstn  $end
$var wire      1 f!   en  $end
$var wire      1 e!   d_in  $end
$var wire      1 ^!   p_in  $end
$var reg       1 w!   err_data $end
$upscope $end


$scope module receiver_rsr $end
$var parameter 32 x!   WIDTH $end
$var wire      1 a!   d_in  $end
$var wire      1 `!   ld_sh  $end
$var wire      1 T    clk  $end
$var wire      1 b!   en  $end
$var wire      1 C    rst_n  $end
$var wire      1 c!   parity  $end
$var reg       8 y!   d_out [7:0] $end
$var reg       8 z!   fifo_out [7:0] $end
$var reg       8 {!   d_in_reg [7:0] $end
$var integer  32 |!   i $end
$upscope $end


$scope module receiver_dmux $end
$var wire      1 H    in  $end
$var wire      1 ]!   sel  $end
$var reg       1 }!   out_0 $end
$var reg       1 ~!   out_1 $end
$var parameter  1 !"   OUT_0 $end
$var parameter  1 ""   OUT_1 $end
$upscope $end

$upscope $end

$upscope $end


$scope module RX_DUT $end
$var parameter 32 #"   WIDTH $end
$var wire      1 $"   clk  $end
$var wire      1 %"   clk_sel  $end
$var wire      1 &"   rstn  $end
$var wire      1 '"   tr_en  $end
$var wire      1 ("   mode_osl  $end
$var wire     16 )"   dlh_dll [15:0] $end
$var wire      8 *"   tr_fifo_data_w [7:0] $end
$var wire      1 +"   rx_data_in  $end
$var wire      1 ,"   tx_data_out  $end
$var wire      8 -"   rx_data_read_out [7:0] $end
$var wire      1 ."   rx_data_read_en  $end
$var wire      1 /"   tx_data_w_en  $end
$var wire      1 0"   transmit_busy  $end
$var wire      1 1"   tx_i_interpt  $end
$var wire      1 2"   rx_i_interpt  $end
$var wire      1 3"   tx_o_interpt  $end
$var wire      1 4"   rx_o_interpt  $end
$var wire      1 5"   tr_data_load  $end
$var wire      1 6"   clk_out  $end
$var wire      1 7"   modified_clk  $end
$var wire      1 8"   tr_d_ready  $end
$var wire      1 9"   rx_fifo_en  $end
$var wire      8 :"   tr_fifo_data_in [7:0] $end
$var wire      8 ;"   rx_fifo_data_in [7:0] $end
$var wire      1 <"   tr_bz  $end

$scope module ck_mux $end
$var wire      1 $"   in_0  $end
$var wire      1 6"   in_1  $end
$var wire      1 %"   sel  $end
$var reg       1 ="   out $end
$var parameter  1 >"   IN_0 $end
$var parameter  1 ?"   IN_1 $end
$upscope $end


$scope module clk_generator $end
$var wire      1 $"   clk  $end
$var wire      1 &"   rstn  $end
$var wire     16 )"   dlh_dll [15:0] $end
$var wire      1 ("   mode_osl  $end
$var wire      1 6"   bclk  $end
$var wire     16 @"   mode_0 [15:0] $end
$var wire     16 A"   mode_1 [15:0] $end
$var reg       5 B"   mode_reg_0 [4:0] $end
$var reg       4 C"   mode_reg_1 [3:0] $end
$var reg      16 D"   ck_count [15:0] $end
$upscope $end


$scope module tr_fifo $end
$var parameter 32 E"   WIDTH $end
$var parameter 32 F"   SIZE $end
$var wire      1 7"   clk_i  $end
$var wire      1 &"   rst_n_i  $end
$var wire      1 /"   we_i  $end
$var wire      1 5"   re_i  $end
$var wire      1 <"   tr_bz  $end
$var wire      8 *"   wdata_i [7:0] $end
$var reg       1 G"   o_interpt $end
$var reg       1 H"   i_interpt $end
$var reg       1 I"   d_ready $end
$var wire      8 :"   rdata_o [7:0] $end
$var parameter 32 J"   BYTESIZE $end
$var parameter 32 K"   MEMSIZE $end
$var parameter 32 L"   ADDRSIZE $end
$var integer  32 M"   i $end
$var reg       8 N"   mem[15] [7:0] $end
$var reg       8 O"   mem[14] [7:0] $end
$var reg       8 P"   mem[13] [7:0] $end
$var reg       8 Q"   mem[12] [7:0] $end
$var reg       8 R"   mem[11] [7:0] $end
$var reg       8 S"   mem[10] [7:0] $end
$var reg       8 T"   mem[9] [7:0] $end
$var reg       8 U"   mem[8] [7:0] $end
$var reg       8 V"   mem[7] [7:0] $end
$var reg       8 W"   mem[6] [7:0] $end
$var reg       8 X"   mem[5] [7:0] $end
$var reg       8 Y"   mem[4] [7:0] $end
$var reg       8 Z"   mem[3] [7:0] $end
$var reg       8 ["   mem[2] [7:0] $end
$var reg       8 \"   mem[1] [7:0] $end
$var reg       8 ]"   mem[0] [7:0] $end
$var reg       4 ^"   waddr [3:0] $end
$var reg       4 _"   raddr [3:0] $end
$var reg       4 `"   count [3:0] $end
$var reg       8 a"   rdata_reg [7:0] $end
$upscope $end


$scope module tr_module $end
$var parameter 32 b"   WIDTH $end
$var wire      1 '"   en  $end
$var wire      1 8"   d_ready  $end
$var wire      1 7"   clk  $end
$var wire      1 &"   rstn  $end
$var wire      8 :"   d_in [7:0] $end
$var wire      1 ,"   tx_data  $end
$var wire      1 <"   tr_bz  $end
$var reg       1 c"   start_bit $end
$var reg       1 d"   stop_bit $end
$var wire      2 e"   sel_wire [1:0] $end
$var wire      1 f"   p_wire  $end
$var wire      1 g"   tsr_wire  $end
$var wire      1 h"   data_load_wire  $end

$scope module tfsm $end
$var parameter 32 i"   WIDTH $end
$var wire      1 7"   clk  $end
$var wire      1 &"   rstn  $end
$var wire      1 '"   en  $end
$var wire      1 8"   d_ready  $end
$var reg       1 j"   tr_bz $end
$var reg       2 k"   sel [1:0] $end
$var reg       1 l"   data_load $end
$var parameter  3 m"   IDLE [2:0] $end
$var parameter  3 n"   START [2:0] $end
$var parameter  3 o"   DATA [2:0] $end
$var parameter  3 p"   PARITY [2:0] $end
$var parameter  3 q"   STOP [2:0] $end
$var reg       3 r"   state_reg [2:0] $end
$var reg       3 s"   next_state [2:0] $end
$var reg       3 t"   count [2:0] $end
$upscope $end


$scope module tparity_gen $end
$var parameter 32 u"   WIDTH $end
$var wire      8 :"   d_in [7:0] $end
$var reg       1 v"   p_out $end
$upscope $end


$scope module transmit_tsr $end
$var parameter 32 w"   WIDTH $end
$var wire      8 :"   d_in [7:0] $end
$var wire      1 h"   ld_sh  $end
$var wire      1 '"   en  $end
$var wire      1 7"   clk  $end
$var wire      1 &"   rst_n  $end
$var wire      1 g"   d_out  $end
$var reg       8 x"   d_in_reg [7:0] $end
$var reg       1 y"   d_out_reg $end
$upscope $end


$scope module tmux $end
$var wire      1 z"   in_0  $end
$var wire      1 g"   in_1  $end
$var wire      1 f"   in_2  $end
$var wire      1 {"   in_3  $end
$var wire      2 e"   sel [1:0] $end
$var wire      1 '"   en  $end
$var reg       1 |"   out $end
$var parameter  2 }"   IN_0 [1:0] $end
$var parameter  2 ~"   IN_1 [1:0] $end
$var parameter  2 !#   IN_2 [1:0] $end
$var parameter  2 "#   IN_3 [1:0] $end
$upscope $end

$upscope $end


$scope module rr_fifo $end
$var parameter 32 ##   WIDTH $end
$var parameter 32 $#   SIZE $end
$var wire      1 7"   clk_i  $end
$var wire      1 &"   rst_n_i  $end
$var wire      1 9"   we_i  $end
$var wire      1 ."   re_i  $end
$var wire      8 ;"   wdata_i [7:0] $end
$var reg       1 %#   o_interpt $end
$var reg       1 &#   i_interpt $end
$var wire      8 -"   rdata_o [7:0] $end
$var parameter 32 '#   BYTESIZE $end
$var parameter 32 (#   MEMSIZE $end
$var parameter 32 )#   ADDRSIZE $end
$var integer  32 *#   i $end
$var reg       8 +#   mem[15] [7:0] $end
$var reg       8 ,#   mem[14] [7:0] $end
$var reg       8 -#   mem[13] [7:0] $end
$var reg       8 .#   mem[12] [7:0] $end
$var reg       8 /#   mem[11] [7:0] $end
$var reg       8 0#   mem[10] [7:0] $end
$var reg       8 1#   mem[9] [7:0] $end
$var reg       8 2#   mem[8] [7:0] $end
$var reg       8 3#   mem[7] [7:0] $end
$var reg       8 4#   mem[6] [7:0] $end
$var reg       8 5#   mem[5] [7:0] $end
$var reg       8 6#   mem[4] [7:0] $end
$var reg       8 7#   mem[3] [7:0] $end
$var reg       8 8#   mem[2] [7:0] $end
$var reg       8 9#   mem[1] [7:0] $end
$var reg       8 :#   mem[0] [7:0] $end
$var reg       4 ;#   waddr [3:0] $end
$var reg       4 <#   raddr [3:0] $end
$var reg       4 =#   count [3:0] $end
$var reg       8 >#   rdata_reg [7:0] $end
$upscope $end


$scope module rx_module $end
$var parameter 32 ?#   WIDTH $end
$var wire      1 7"   clk  $end
$var wire      1 &"   rstn  $end
$var wire      1 +"   rx_data  $end
$var wire      8 ;"   d_out [7:0] $end
$var wire      1 9"   fifo_we_en  $end
$var wire      1 @#   sel_wire  $end
$var wire      1 A#   p_wire  $end
$var wire      8 B#   rsr_wire [7:0] $end
$var wire      1 C#   data_load_wire  $end
$var wire      1 D#   rsr_data  $end
$var wire      1 E#   en_rsr  $end
$var wire      1 F#   parity_error  $end
$var wire      3 G#   rfsm_count_out [2:0] $end
$var wire      1 H#   p_check_in  $end
$var wire      1 I#   parity_en  $end

$scope module receiver_fsm $end
$var parameter 32 J#   WIDTH $end
$var wire      1 7"   clk  $end
$var wire      1 +"   d_ready  $end
$var wire      1 &"   rst_n  $end
$var wire      1 F#   p_error  $end
$var reg       1 K#   sel $end
$var reg       1 L#   d_load $end
$var reg       1 M#   en_out_rsr $end
$var reg       1 N#   en_out_parity $end
$var reg       3 O#   count_out [2:0] $end
$var reg       1 P#   fifo_we_i $end
$var parameter  2 Q#   IDLE [1:0] $end
$var parameter  2 R#   DATA [1:0] $end
$var parameter  2 S#   PARITY [1:0] $end
$var parameter  2 T#   STOP [1:0] $end
$var reg       2 U#   state_reg [1:0] $end
$var reg       2 V#   next_state [1:0] $end
$var reg       3 W#   count [2:0] $end
$upscope $end


$scope module receiver_data_parity $end
$var wire      1 7"   clk  $end
$var wire      1 &"   rstn  $end
$var wire      1 E#   en  $end
$var wire      1 D#   d_in  $end
$var wire      3 G#   count [2:0] $end
$var wire      1 H#   parity_out  $end
$var reg       1 X#   parity_out_reg $end
$upscope $end


$scope module rparity_check $end
$var parameter 32 Y#   WIDTH $end
$var wire      1 7"   clk  $end
$var wire      1 &"   rstn  $end
$var wire      1 I#   en  $end
$var wire      1 H#   d_in  $end
$var wire      1 A#   p_in  $end
$var reg       1 Z#   err_data $end
$upscope $end


$scope module receiver_rsr $end
$var parameter 32 [#   WIDTH $end
$var wire      1 D#   d_in  $end
$var wire      1 C#   ld_sh  $end
$var wire      1 7"   clk  $end
$var wire      1 E#   en  $end
$var wire      1 &"   rst_n  $end
$var wire      1 F#   parity  $end
$var reg       8 \#   d_out [7:0] $end
$var reg       8 ]#   fifo_out [7:0] $end
$var reg       8 ^#   d_in_reg [7:0] $end
$var integer  32 _#   i $end
$upscope $end


$scope module receiver_dmux $end
$var wire      1 +"   in  $end
$var wire      1 @#   sel  $end
$var reg       1 `#   out_0 $end
$var reg       1 a#   out_1 $end
$var parameter  1 b#   OUT_0 $end
$var parameter  1 c#   OUT_1 $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
1c#
0b#
b1000 [#
b1000 Y#
b10 T#
b11 S#
b1 R#
b0 Q#
b1000 J#
b1000 ?#
b100 )#
b10000 (#
b1 '#
b10000 $#
b1000 ##
b10 "#
b11 !#
b1 ~"
b0 }"
b1000 w"
b1000 u"
b100 q"
b11 p"
b10 o"
b1 n"
b0 m"
b1000 i"
b1000 b"
b100 L"
b10000 K"
b1 J"
b10000 F"
b1000 E"
1?"
0>"
b1000 #"
1""
0!"
b1000 x!
b1000 v!
b10 q!
b11 p!
b1 o!
b0 n!
b1000 g!
b1000 \!
b100 F!
b10000 E!
b1 D!
b10000 A!
b1000 @!
b10 ?!
b11 >!
b1 =!
b0 <!
b1000 6!
b1000 4!
b100 0!
b11 /!
b10 .!
b1 -!
b0 ,!
b1000 (!
b1000 !!
b100 i
b10000 h
b1 g
b10000 c
b1000 b
1\
0[
b1000 @
b1000 !
0"
0#
1$
b10010110000000 %
0&
0'
0(
b0 )
bx *
0+
0,
x-
x.
x/
x0
x1
02
03
04
b0 5
bx 6
07
08
x9
x:
x;
x<
x=
z>
z?
0A
0B
1C
0D
0E
b10010110000000 F
b0 G
zH
zI
bx J
0K
0L
xM
xN
xO
xP
xQ
0R
xS
0T
xU
xV
bx W
bx X
xY
0Z
b1001011000 ]
b1011100010 ^
b10000 _
b1101 `
bx a
xd
xe
xf
bx j
bx k
bx l
bx m
bx n
bx o
bx p
bx q
bx r
bx s
bx t
bx u
bx v
bx w
bx x
bx y
bx z
bx {
bx |
bx }
bx ~
0"!
1#!
bx $!
x%!
x&!
x'!
x)!
bx *!
x+!
bx 1!
bx 2!
bx 3!
x5!
bx 7!
x8!
09!
1:!
z;!
xB!
xC!
bx G!
bx H!
bx I!
bx J!
bx K!
bx L!
bx M!
bx N!
bx O!
bx P!
bx Q!
bx R!
bx S!
bx T!
bx U!
bx V!
bx W!
bx X!
bx Y!
bx Z!
bx [!
z]!
z^!
bx _!
x`!
za!
0b!
xc!
bx d!
xe!
0f!
zh!
xi!
0j!
0k!
bx l!
xm!
bx r!
b0 s!
b0 t!
xu!
xw!
bx y!
bx z!
bx {!
bx |!
z}!
z~!
0$"
0%"
1&"
0'"
0("
b10010110000000 )"
b0 *"
z+"
z,"
bx -"
0."
0/"
x0"
x1"
x2"
x3"
x4"
05"
x6"
07"
x8"
x9"
bx :"
bx ;"
x<"
0="
b1001011000 @"
b1011100010 A"
b10000 B"
b1101 C"
bx D"
xG"
xH"
xI"
bx M"
bx N"
bx O"
bx P"
bx Q"
bx R"
bx S"
bx T"
bx U"
bx V"
bx W"
bx X"
bx Y"
bx Z"
bx ["
bx \"
bx ]"
bx ^"
bx _"
bx `"
bx a"
0c"
1d"
bx e"
xf"
xg"
xh"
xj"
bx k"
xl"
bx r"
bx s"
bx t"
xv"
bx x"
xy"
0z"
1{"
z|"
x%#
x&#
bx *#
bx +#
bx ,#
bx -#
bx .#
bx /#
bx 0#
bx 1#
bx 2#
bx 3#
bx 4#
bx 5#
bx 6#
bx 7#
bx 8#
bx 9#
bx :#
bx ;#
bx <#
bx =#
bx >#
z@#
zA#
bx B#
xC#
zD#
0E#
xF#
bx G#
xH#
0I#
zK#
xL#
0M#
0N#
bx O#
xP#
bx U#
b0 V#
b0 W#
xX#
xZ#
bx \#
bx ]#
bx ^#
bx _#
z`#
za#
$end
#10000
1"
0$
0&"
0C
1$"
1A
b0 D"
b0 ^#
b0 *#
b0 :#
b1 *#
b0 9#
b10 *#
b0 8#
b11 *#
b0 7#
b100 *#
b0 6#
b101 *#
b0 5#
b110 *#
b0 4#
b111 *#
b0 3#
b1000 *#
b0 2#
b1001 *#
b0 1#
b1010 *#
b0 0#
b1011 *#
b0 /#
b1100 *#
b0 .#
b1101 *#
b0 -#
b1110 *#
b0 ,#
b1111 *#
b0 +#
b10000 *#
b0 ;#
b0 >#
b0 <#
b0 =#
0&#
1%#
b0 M"
b0 ]"
b1 M"
b0 \"
b10 M"
b0 ["
b11 M"
b0 Z"
b100 M"
b0 Y"
b101 M"
b0 X"
b110 M"
b0 W"
b111 M"
b0 V"
b1000 M"
b0 U"
b1001 M"
b0 T"
b1010 M"
b0 S"
b1011 M"
b0 R"
b1100 M"
b0 Q"
b1101 M"
b0 P"
b1110 M"
b0 O"
b1111 M"
b0 N"
b10000 M"
b0 ^"
b0 a"
b0 _"
b0 `"
0I"
0H"
1G"
b0 a
b0 {!
b0 G!
b0 W!
b1 G!
b0 V!
b10 G!
b0 U!
b11 G!
b0 T!
b100 G!
b0 S!
b101 G!
b0 R!
b110 G!
b0 Q!
b111 G!
b0 P!
b1000 G!
b0 O!
b1001 G!
b0 N!
b1010 G!
b0 M!
b1011 G!
b0 L!
b1100 G!
b0 K!
b1101 G!
b0 J!
b1110 G!
b0 I!
b1111 G!
b0 H!
b10000 G!
b0 X!
b0 [!
b0 Y!
b0 Z!
0C!
1B!
b0 j
b0 z
b1 j
b0 y
b10 j
b0 x
b11 j
b0 w
b100 j
b0 v
b101 j
b0 u
b110 j
b0 t
b111 j
b0 s
b1000 j
b0 r
b1001 j
b0 q
b1010 j
b0 p
b1011 j
b0 o
b1100 j
b0 n
b1101 j
b0 m
b1110 j
b0 l
b1111 j
b0 k
b10000 j
b0 {
b0 ~
b0 |
b0 }
0f
0e
1d
0S
06"
1P
0N
0U
b0 W
1Q
0O
b0 J
13"
01"
08"
b0 :"
14"
02"
b0 -"
10
0.
05!
11
0/
b0 *
1<
0:
0v"
1=
0;
b0 6
0f"
0%!
1Z#
0X#
0L#
0P#
b0 x"
b0 s"
bz k"
b0 t"
0l"
0j"
1w!
0u!
0i!
0m!
b0 7!
b0 2!
bz *!
b0 3!
0+!
0)!
1="
1Z
1T
17"
0Y
0'!
bz $!
0V
0`!
0e!
1c!
0<"
0h"
bz e"
09"
0C#
0H#
1F#
00"
0M
b0 G!
b1 G!
b10 G!
b11 G!
b100 G!
b101 G!
b110 G!
b111 G!
b1000 G!
b1001 G!
b1010 G!
b1011 G!
b1100 G!
b1101 G!
b1110 G!
b1111 G!
b10000 G!
b0 j
b1 j
b10 j
b11 j
b100 j
b101 j
b110 j
b111 j
b1000 j
b1001 j
b1010 j
b1011 j
b1100 j
b1101 j
b1110 j
b1111 j
b10000 j
b0 *#
b1 *#
b10 *#
b11 *#
b100 *#
b101 *#
b110 *#
b111 *#
b1000 *#
b1001 *#
b1010 *#
b1011 *#
b1100 *#
b1101 *#
b1110 *#
b1111 *#
b10000 *#
b0 M"
b1 M"
b10 M"
b11 M"
b100 M"
b101 M"
b110 M"
b111 M"
b1000 M"
b1001 M"
b1010 M"
b1011 M"
b1100 M"
b1101 M"
b1110 M"
b1111 M"
b10000 M"
09
0-
#20000
0"
0$"
0A
0="
0Z
0T
07"
#30000
1"
1$
1&"
1C
1$"
1A
b1 D"
b1 a
1="
1Z
1T
17"
b0 r!
b0 U#
#40000
0"
0$"
0A
0="
0Z
0T
07"
#50000
1"
1,
b100101 )
b100101 G
1L
1$"
1A
b10 D"
b10 a
1="
1Z
1T
17"
b100101 z
b1 {
b1 }
0d
0P
00
#60000
0"
0$"
0A
0="
0Z
0T
07"
#70000
1"
0,
0L
1$"
1A
b11 D"
b11 a
1="
1Z
1T
17"
#80000
0"
0$"
0A
0="
0Z
0T
07"
#90000
1"
1,
b10000010 )
b10000010 G
1L
1$"
1A
b100 D"
b100 a
1="
1Z
1T
17"
b10000010 y
b10 {
b10 }
#100000
0"
0$"
0A
0="
0Z
0T
07"
#110000
1"
0,
0L
1$"
1A
b101 D"
b101 a
1="
1Z
1T
17"
#120000
0"
0$"
0A
0="
0Z
0T
07"
#130000
1"
1,
b1010 )
b1010 G
1L
1$"
1A
b110 D"
b110 a
1="
1Z
1T
17"
b1010 x
b11 {
b11 }
#140000
0"
0$"
0A
0="
0Z
0T
07"
#150000
1"
0,
0L
1$"
1A
b111 D"
b111 a
1="
1Z
1T
17"
#160000
0"
0$"
0A
0="
0Z
0T
07"
#170000
1"
1,
b1100100 )
b1100100 G
1L
1$"
1A
b1000 D"
b1000 a
1="
1Z
1T
17"
b1100100 w
b100 {
b100 }
#180000
0"
0$"
0A
0="
0Z
0T
07"
#190000
1"
0,
0L
1$"
1A
b1001 D"
b1001 a
1="
1Z
1T
17"
#200000
0"
0$"
0A
0="
0Z
0T
07"
#210000
1"
1,
b1110 )
b1110 G
1L
1$"
1A
b1010 D"
b1010 a
1="
1Z
1T
17"
b1110 v
b101 {
b101 }
#220000
0"
0$"
0A
0="
0Z
0T
07"
#230000
1"
0,
0L
1$"
1A
b1011 D"
b1011 a
1="
1Z
1T
17"
#240000
0"
0$"
0A
0="
0Z
0T
07"
#250000
1"
1,
b10001110 )
b10001110 G
1L
1$"
1A
b1100 D"
b1100 a
1="
1Z
1T
17"
b10001110 u
b110 {
b110 }
#260000
0"
0$"
0A
0="
0Z
0T
07"
#270000
1"
0,
0L
1$"
1A
b1101 D"
b1101 a
1="
1Z
1T
17"
#280000
0"
0$"
0A
0="
0Z
0T
07"
#290000
1"
1,
b1100110 )
b1100110 G
1L
1$"
1A
b1110 D"
b1110 a
1="
1Z
1T
17"
b1100110 t
b111 {
b111 }
#300000
0"
0$"
0A
0="
0Z
0T
07"
#310000
1"
0,
0L
1$"
1A
b1111 D"
b1111 a
1="
1Z
1T
17"
#320000
0"
0$"
0A
0="
0Z
0T
07"
#330000
1"
1,
b10011 )
b10011 G
1L
1$"
1A
b10000 D"
b10000 a
1="
1Z
1T
17"
b10011 s
b1000 {
b1000 }
#340000
0"
0$"
0A
0="
0Z
0T
07"
#350000
1"
0,
0L
1$"
1A
b10001 D"
b10001 a
1="
1Z
1T
17"
#360000
0"
0$"
0A
0="
0Z
0T
07"
#370000
1"
1,
b10 )
b10 G
1L
1$"
1A
b10010 D"
b10010 a
1="
1Z
1T
17"
b10 r
b1001 {
b1001 }
#380000
0"
0$"
0A
0="
0Z
0T
07"
#390000
1"
0,
0L
1$"
1A
b10011 D"
b10011 a
1="
1Z
1T
17"
#400000
0"
0$"
0A
0="
0Z
0T
07"
#410000
1"
1,
b1110 )
b1110 G
1L
1$"
1A
b10100 D"
b10100 a
1="
1Z
1T
17"
b1110 q
b1010 {
b1010 }
#420000
0"
0$"
0A
0="
0Z
0T
07"
#430000
1"
0,
0L
1$"
1A
b10101 D"
b10101 a
1="
1Z
1T
17"
#440000
0"
0$"
0A
0="
0Z
0T
07"
#450000
1"
1'
1&
1D
1R
1$"
1A
b10110 D"
b10110 a
1="
1Z
1T
17"
1f
b100101 ~
b0 z
b1 |
b1001 }
b100101 W
1U
15!
1%!
08!
b0 1!
0&!
1+!
b1 2!
1'!
#460000
0"
0$"
0A
0="
0Z
0T
07"
#470000
1"
0'
0R
1$"
1A
b10111 D"
b10111 a
1="
1Z
1T
17"
0f
0U
b100101 7!
b1 1!
b0 2!
1)!
0+!
b10 2!
b0 *!
b0 $!
0'!
1Y
1M
1-
0;!
0I
0?
0+"
b1 V#
#480000
0"
0$"
0A
0="
0Z
0T
07"
#490000
1"
1$"
1A
b11000 D"
b11000 a
1="
1Z
1T
17"
b1001010 7!
b10 1!
b1 U#
b1 *!
0K#
1M#
b0 O#
b0 G#
1E#
0@#
b1 $!
0`#
0D#
#500000
0"
0$"
0A
0="
0Z
0T
07"
#510000
1"
1$"
1A
b11001 D"
b11001 a
1="
1Z
1T
17"
b10010100 7!
b1 3!
b1 W#
b1 O#
b1 G#
#520000
0"
0$"
0A
0="
0Z
0T
07"
#530000
1"
1$"
1A
b11010 D"
b11010 a
1="
1Z
1T
17"
18!
b101000 7!
b10 3!
b10 W#
1&!
b10 O#
1;!
1I
b10 G#
1?
1+"
1`#
1D#
#540000
0"
0$"
0A
0="
0Z
0T
07"
#550000
1"
1$"
1A
b11011 D"
b11011 a
1="
1Z
1T
17"
b1 ^#
08!
b1010000 7!
b11 3!
1X#
b11 W#
1H#
0&!
b11 O#
0;!
0I
b11 G#
0?
0+"
0`#
0D#
#560000
0"
0$"
0A
0="
0Z
0T
07"
#570000
1"
1$"
1A
b11100 D"
b11100 a
1="
1Z
1T
17"
b10 ^#
b10100000 7!
b100 3!
b100 W#
b100 O#
b100 G#
#580000
0"
0$"
0A
0="
0Z
0T
07"
#590000
1"
1$"
1A
b11101 D"
b11101 a
1="
1Z
1T
17"
b100 ^#
18!
b1000000 7!
b101 3!
b101 W#
1&!
b101 O#
1;!
1I
b101 G#
1?
1+"
1`#
1D#
#600000
0"
0$"
0A
0="
0Z
0T
07"
#610000
1"
1$"
1A
b11110 D"
b11110 a
1="
1Z
1T
17"
b1000 ^#
b1001 ^#
08!
b10000000 7!
b110 3!
0X#
b110 W#
0H#
0&!
b110 O#
0;!
0I
b110 G#
0?
0+"
0`#
0D#
#620000
0"
0$"
0A
0="
0Z
0T
07"
#630000
1"
1$"
1A
b11111 D"
b11111 a
1="
1Z
1T
17"
b10010 ^#
18!
b0 7!
b111 3!
b111 W#
b11 V#
1&!
b11 2!
b111 O#
1;!
1I
b111 G#
1?
1+"
1`#
1D#
#640000
0"
0$"
0A
0="
0Z
0T
07"
#650000
1"
1$"
1A
b100000 D"
b100000 a
1="
1Z
1T
17"
b100100 ^#
b100101 ^#
08!
b11 1!
1X#
b11 U#
1H#
0&!
b100 2!
b11 *!
1K#
b10 V#
1N#
1L#
0;!
0I
1C#
1I#
1@#
b11 $!
0?
0+"
0a#
1;!
1I
0A#
1?
1+"
1a#
1A#
#660000
0"
0$"
0A
0="
0Z
0T
07"
#670000
1"
1$"
1A
b100001 D"
b100001 a
1="
1Z
1T
17"
b100101 \#
b0 ^#
b100101 B#
b100 1!
0Z#
0X#
b10 U#
0H#
0F#
0)!
b0 2!
b10 *!
zK#
0M#
b0 V#
0L#
b100101 ]#
1P#
19"
b100101 ;"
0C#
0E#
z@#
b10 $!
0Y
0M
0-
z`#
za#
zA#
zD#
#680000
0"
0$"
0A
0="
0Z
0T
07"
#690000
1"
1$"
1A
b100010 D"
b100010 a
1="
1Z
1T
17"
b100101 :#
b1 ;#
b1 =#
b0 1!
1Z#
b0 U#
0%#
04"
1F#
0=
1+!
bz *!
b0 W#
0P#
0N#
0I#
09"
bz $!
1'!
z;!
zI
z?
z+"
#700000
0"
0$"
0A
0="
0Z
0T
07"
#710000
1"
0&
0D
1$"
1A
b100011 D"
b100011 a
1="
1Z
1T
17"
#720000
0"
0$"
0A
0="
0Z
0T
07"
#730000
1"
1$"
1A
b100100 D"
b100100 a
1="
1Z
1T
17"
#740000
0"
0$"
0A
0="
0Z
0T
07"
#750000
1"
1$"
1A
b100101 D"
b100101 a
1="
1Z
1T
17"
#760000
0"
0$"
0A
0="
0Z
0T
07"
#770000
1"
1$"
1A
b100110 D"
b100110 a
1="
1Z
1T
17"
#780000
0"
0$"
0A
0="
0Z
0T
07"
#790000
1"
1$"
1A
b100111 D"
b100111 a
1="
1Z
1T
17"
#800000
0"
0$"
0A
0="
0Z
0T
07"
#810000
1"
1$"
1A
b101000 D"
b101000 a
1="
1Z
1T
17"
#820000
0"
0$"
0A
0="
0Z
0T
07"
#830000
1"
1$"
1A
b101001 D"
b101001 a
1="
1Z
1T
17"
#840000
0"
0$"
0A
0="
0Z
0T
07"
#850000
1"
1$"
1A
b101010 D"
b101010 a
1="
1Z
1T
17"
#860000
0"
0$"
0A
0="
0Z
0T
07"
#870000
1"
1$"
1A
b101011 D"
b101011 a
1="
1Z
1T
17"
#880000
0"
0$"
0A
0="
0Z
0T
07"
#890000
1"
1$"
1A
b101100 D"
b101100 a
1="
1Z
1T
17"
#900000
0"
0$"
0A
0="
0Z
0T
07"
#910000
1"
1$"
1A
b101101 D"
b101101 a
1="
1Z
1T
17"
#920000
0"
0$"
0A
0="
0Z
0T
07"
#930000
1"
17
1."
1$"
1A
b101110 D"
b101110 a
1="
1Z
1T
17"
b100101 >#
b0 :#
b1 <#
b0 =#
b100101 -"
b100101 6
b0 <#
b0 ;#
1%#
14"
1=
#940000
0"
0$"
0A
0="
0Z
0T
07"
#950000
1"
07
0."
1$"
1A
b101111 D"
b101111 a
1="
1Z
1T
17"
#960000
0"
